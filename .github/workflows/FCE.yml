name: Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
        description: 'Firmware download URL'
      track:
        required: false
        description: 'Tracking ID'
      image_type:
        required: true
        default: 'boot'
        description: 'boot/recovery/modem'

env:
  SEARCH_PATHS: ". firmware-update firmware images radio"
  MAX_ATTEMPTS: 3
  RETRY_DELAY: 10

jobs:
  extract:
    name: ${{ inputs.track || 'manual-run' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Verify Inputs
        run: |
          echo "Starting extraction for:"
          echo "URL: ${{ inputs.url }}"
          echo "Type: ${{ inputs.image_type }}"
          echo "Track: ${{ inputs.track || 'N/A' }}"
          
          if [[ ! "${{ inputs.url }}" =~ .zip$ ]]; then
            echo "::error::Invalid URL (must end with .zip)"
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            p7zip-full \
            aria2 \
            brotli \
            simg2img \
            python3-pip
          pip install -r ./tools/requirements.txt

      - name: Download Firmware (Retry Logic)
        run: |
          for ((i=1; i<=$MAX_ATTEMPTS; i++)); do
            if aria2c -x 8 -s 8 --out=firmware.zip "${{ inputs.url }}"; then
              break
            elif [ $i -eq $MAX_ATTEMPTS ]; then
              echo "::error::Download failed after $MAX_ATTEMPTS attempts"
              exit 1
            else
              echo "Attempt $i failed, retrying in $RETRY_DELAY seconds..."
              sleep $RETRY_DELAY
            fi
          done

      - name: Extract Firmware
        run: |
          7z x firmware.zip -oextracted -y
          rm -f firmware.zip

      - name: Locate Target Files
        id: locate
        run: |
          cd extracted
          rom_name=$(basename "${{ inputs.url }}" .zip)
          output_file="${{ inputs.image_type }}_${rom_name}.zip"
          
          declare -A file_patterns=(
            ["boot"]="boot.img"
            ["recovery"]="recovery.img"
            ["modem"]="NON-HLOS.bin md1img.img modem.bin modem.img"
          )

          found_file=""
          for path in $SEARCH_PATHS; do
            [ ! -d "$path" ] && continue
            for pattern in ${file_patterns[${{ inputs.image_type }}]}; do
              if [ -f "$path/$pattern" ]; then
                found_file="$path/$pattern"
                break 2
              fi
            done
          done

          if [ -z "$found_file" ] && [ -f "payload.bin" ]; then
            echo "Extracting from payload..."
            python3 ../tools/payload_dumper.py --out . --images "${{ inputs.image_type }}"* payload.bin
            
            for pattern in ${file_patterns[${{ inputs.image_type }}]}; do
              if [ -f "$pattern" ]; then
                found_file="$pattern"
                break
              fi
            done
          fi

          if [ -z "$found_file" ]; then
            echo "::error::No ${{ inputs.image_type }} files found"
            exit 1
          fi

          echo "Found file: $found_file"
          7z a "../release/$output_file" "$found_file"
          echo "output_file=$output_file" >> $GITHUB_OUTPUT

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          files: release/${{ steps.locate.outputs.output_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf extracted release
