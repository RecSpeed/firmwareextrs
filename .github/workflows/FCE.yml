name: Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
        description: 'Firmware ZIP URL'
      track:
        required: false
        description: 'Tracking ID'
      image_type:
        required: true
        default: 'boot'
        description: 'Image type (boot/recovery/modem)'

env:
  SEARCH_PATHS: ". firmware-update firmware images radio"
  MAX_RETRIES: 3
  RETRY_DELAY: 10

jobs:
  extract:
    name: ${{ inputs.track || 'manual-run' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Validate Inputs
        run: |
          if [[ ! "${{ inputs.url }}" =~ \.zip($|\?) ]]; then
            echo "::error::Invalid ZIP URL"
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            android-sdk-libsparse-utils \
            p7zip-full \
            aria2 \
            brotli \
            python3-pip
          sudo ln -sf /usr/lib/android-sdk/libsparse-utils/simg2img /usr/local/bin/
          pip install -r ./tools/requirements.txt

      - name: Download Firmware
        run: |
          for i in $(seq 1 $MAX_RETRIES); do
            aria2c -x 8 -s 8 --out=firmware.zip "${{ inputs.url }}" && break
            sleep $RETRY_DELAY
            [ $i -eq $MAX_RETRIES ] && exit 1
          done

      - name: Extract and Process
        id: process
        run: |
          7z x firmware.zip -oextracted -y
          cd extracted

          declare -A patterns=(
            ["boot"]="boot.img"
            ["recovery"]="recovery.img"
            ["modem"]="NON-HLOS.bin md1img.img modem.bin modem.img"
          )

          # Search in all paths
          for path in $SEARCH_PATHS; do
            [ ! -d "$path" ] && continue
            for pattern in ${patterns[${{ inputs.image_type }}]}; do
              if [ -f "$path/$pattern" ]; then
                7z a "../release/${{ inputs.image_type }}_$(basename "${{ inputs.url }}" .zip)" "$path/$pattern"
                echo "output_file=${{ inputs.image_type }}_$(basename "${{ inputs.url }}" .zip)" >> $GITHUB_OUTPUT
                exit 0
              fi
            done
          done

          # Fallback to payload.bin
          if [ -f "payload.bin" ]; then
            python3 ../tools/payload_dumper.py --out . --images "${{ inputs.image_type }}"* payload.bin
            for pattern in ${patterns[${{ inputs.image_type }}]}; do
              if [ -f "$pattern" ]; then
                7z a "../release/${{ inputs.image_type }}_$(basename "${{ inputs.url }}" .zip)" "$pattern"
                echo "output_file=${{ inputs.image_type }}_$(basename "${{ inputs.url }}" .zip)" >> $GITHUB_OUTPUT
                exit 0
              fi
            done
          fi

          echo "::error::No ${{ inputs.image_type }} files found"
          exit 1

      - name: Upload Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          files: release/${{ steps.process.outputs.output_file }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -rf extracted release firmware.zip
