name: Enhanced Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
        description: 'Firmware ZIP URL'
      firmware_name:
        required: true
        description: 'Firmware Base Name (without .zip)'
      track:
        required: false
        description: 'Tracking ID'
      image_type:
        required: true
        default: 'boot'
        description: 'boot/recovery/modem/vendor_boot/init_boot/preloader'

concurrency:
  group: extract-${{ inputs.image_type }}-${{ inputs.firmware_name }}
  cancel-in-progress: true

jobs:
  extract:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check inputs
        run: |
          echo "Processing ${{ inputs.image_type }} from ${{ inputs.url }}"
          echo "Firmware Name: ${{ inputs.firmware_name }}"
          echo "Track ID: ${{ inputs.track || 'None' }}"

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y android-sdk-libsparse-utils p7zip-full aria2 brotli python3-pip
          sudo ln -sf /usr/lib/android-sdk/libsparse-utils/simg2img /usr/local/bin/
          mkdir tools
          curl -L -o pdgo.tar.gz https://github.com/vm03/payload-dumper-go/releases/download/v1.0.0/payload-dumper-go_1.0.0_linux_amd64.tar.gz
          tar -xzf pdgo.tar.gz -C tools
          chmod +x tools/payload-dumper-go
          rm -f pdgo.tar.gz

      - name: Download firmware
        run: |
          aria2c -x 8 -s 8 -k 1M --out=firmware.zip "${{ inputs.url }}" || exit 1
          [ -f firmware.zip ] || (echo "::error::Download failed" && exit 1)

      - name: Extract files
        run: |
          7z x firmware.zip -oextracted -y
          rm -f firmware.zip

      - name: Find and package image
        id: process
        run: |
          cd extracted
          output_file="${{ inputs.image_type }}_${{ inputs.firmware_name }}.zip"

          case "${{ inputs.image_type }}" in
            boot) patterns="boot.img"; partition="boot" ;;
            recovery) patterns="recovery.img"; partition="recovery" ;;
            modem) patterns="NON-HLOS.bin modem.bin modem.img md1img.img md1img.bin"; partition="modem" ;;
            vendor_boot) patterns="vendor_boot.img"; partition="vendor_boot" ;;
            init_boot) patterns="init_boot.img"; partition="init_boot" ;;
            preloader) patterns="preloader_raw.img preloader.bin preloader.img"; partition="";;
            *) echo "::error::Unsupported image_type"; exit 1 ;;
          esac

          found=false
          for pattern in $patterns; do
            file=$(find . -iname "$pattern" | head -n 1)
            if [ -f "$file" ]; then
              7z a "../$output_file" "$file"
              found=true
              break
            fi
          done

          if [ "$found" = false ] && [ -f "payload.bin" ]; then
            echo "Extracting all images from payload.bin..."
            ../tools/payload-dumper-go -i payload.bin -o . || true

            for pattern in $patterns; do
              file=$(find . -iname "$pattern" | head -n 1)
              if [ -f "$file" ]; then
                7z a "../$output_file" "$file"
                found=true
                break
              fi
            done
          fi

          if [ "$found" = false ]; then
            echo "::error::Target image not found"
            exit 1
          fi

          echo "file_name=$output_file" >> $GITHUB_OUTPUT

      - name: Upload release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          files: ${{ steps.process.outputs.file_name }}

      - name: Update KV on Success
        if: success()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          file="${{ steps.process.outputs.file_name }}"
          data="{\"state\": \"complete\", \"timestamp\": \"$timestamp\", \"error\": null, \"file\": \"$file\"}"
          echo "Updating KV (success): $data"

          response=$(curl -sS -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/$key" \
            -H "X-Auth-Email: ${{ secrets.CF_X_AUTH_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CF_X_AUTH_KEY }}" \
            -H "Content-Type: application/json" \
            --data "$data")

          if ! echo "$response" | grep -q '"success":true'; then
            echo "::error::KV güncelleme başarısız (success): $response"
            exit 1
          fi

      - name: Update KV on Failure
        if: failure()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          error_msg=$(grep "::error::" "$GITHUB_STEP_SUMMARY" | sed -n 's/.*::error:://p' | tail -1 || echo "Unknown failure")
          data="{\"state\": \"failed\", \"timestamp\": \"$timestamp\", \"error\": \"$error_msg\", \"tracking_url\": \"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}"
          echo "Updating KV (failure): $data"

          response=$(curl -sS -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/$key" \
            -H "X-Auth-Email: ${{ secrets.CF_X_AUTH_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CF_X_AUTH_KEY }}" \
            -H "Content-Type: application/json" \
            --data "$data")

          if ! echo "$response" | grep -q '"success":true'; then
            echo "::error::KV güncelleme başarısız (failure): $response"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: rm -rf extracted tools
