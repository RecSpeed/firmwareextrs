name: Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
        description: 'Firmware ZIP URL'
      firmware_name:
        required: true
        description: 'Firmware Base Name (without .zip)'
      track:
        required: false
        description: 'Tracking ID'
      image_type:
        required: true
        default: 'boot'
        description: 'boot/recovery/modem'

concurrency:
  group: extract-${{ inputs.image_type }}-${{ inputs.firmware_name }}
  cancel-in-progress: true

jobs:
  extract:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Check inputs
        run: |
          echo "Processing ${{ inputs.image_type }} from ${{ inputs.url }}"
          echo "Firmware Name: ${{ inputs.firmware_name }}"
          echo "Track ID: ${{ inputs.track || 'None' }}"

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            android-sdk-libsparse-utils \
            p7zip-full \
            aria2 \
            brotli
          sudo ln -sf /usr/lib/android-sdk/libsparse-utils/simg2img /usr/local/bin/

      - name: Download firmware
        run: |
          aria2c -x 8 -s 8 --out=firmware.zip "${{ inputs.url }}" || exit 1
          [ -f firmware.zip ] || (echo "Download failed" && exit 1)

      - name: Extract files
        run: |
          7z x firmware.zip -oextracted -y
          rm -f firmware.zip

      - name: Find and package image
        id: process
        run: |
          cd extracted
          output_file="${{ inputs.image_type }}_${{ inputs.firmware_name }}.zip"
          
          case "${{ inputs.image_type }}" in
            boot) patterns="boot.img" ;;
            recovery) patterns="recovery.img" ;;
            modem) patterns="NON-HLOS.bin md1img.img modem.bin modem.img" ;;
          esac
          
          # Search for image files
          found=false
          for pattern in $patterns; do
            file=$(find . -iname "$pattern" | head -n 1)
            if [ -f "$file" ]; then
              7z a "../$output_file" "$file"
              found=true
              break
            fi
          done
          
          # Fallback: If image not found, try using payload.bin and payload_dumper
          if [ "$found" = false ] && [ -f "payload.bin" ]; then
            echo "Using payload_dumper..."
            git clone https://github.com/vm03/payload_dumper.git
            python3 -m pip install protobuf pyelftools
            python3 payload_dumper/payload_dumper.py payload.bin
            
            for pattern in $patterns; do
              file=$(find . -iname "$pattern" | head -n 1)
              if [ -f "$file" ]; then
                7z a "../$output_file" "$file"
                found=true
                break
              fi
            done
          fi
          
          [ "$found" = false ] && exit 1
          echo "file_name=$output_file" >> $GITHUB_OUTPUT

      - name: Upload release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          files: ${{ steps.process.outputs.file_name }}
          draft: false
          prerelease: false

      - name: URL Encode KV Key
        id: urlencode
        run: |
          # KV key format: "<image_type>:<firmware_name>"
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          encoded=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$key'''))")
          echo "::set-output name=encoded::$encoded"

      - name: Update KV on Success
        if: success()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          data="{\"state\": \"complete\", \"timestamp\": \"$timestamp\", \"error\": null}"
          echo "Updating KV record for key $key with value $data"
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/${{ steps.urlencode.outputs.encoded }}" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "$data"

      - name: Update KV on Failure
        if: failure()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          data="{\"state\": \"failed\", \"timestamp\": \"$timestamp\", \"error\": \"Extraction process failed.\"}"
          echo "Updating KV record for key $key with value $data"
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/${{ steps.urlencode.outputs.encoded }}" \
            -H "Authorization: Bearer ${{ secrets.CF_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data "$data"
      
      - name: Cleanup
        if: always()
        run: rm -rf extracted
