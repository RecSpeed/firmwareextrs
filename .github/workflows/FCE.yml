name: FCE

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
      track:
        required: false

env:
  URL: ${{ github.event.inputs.url }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  FCE:
    name: ${{ github.event.inputs.track }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: cache
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/lib/python3*/site-packages
            tools
          key: ${{ runner.os }}-cache-${{ hashFiles('**/tools/*') }}
          restore-keys: |
            ${{ runner.os }}-cache-

      - name: install
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          if [ ! -d tools ]; then
            sudo apt-get update && sudo apt-get install -y python3-pip p7zip-full aria2
            git clone https://github.com/vm03/payload_dumper.git tools
            aria2c -o erofs-utils.zip https://github.com/sekaiacg/erofs-utils/releases/download/v1.8.1-240810/erofs-utils-v1.8.1-gddbed144-Linux_x86_64-2408101422.zip
            7z x erofs-utils.zip -otools
            pip install -r ./tools/requirements.txt
            rm -f erofs-utils.zip
          fi

      - name: download
        run: |
          aria2c -x 7 -s 7 -k 1M --continue --max-tries=0 --log=LOG --out='exrom.zip' "$URL"
          7z x exrom.zip -o./
          rm exrom.zip

      - name: EC
        run: |
          if [ -f "payload.bin" ]; then
            echo "payload.bin found, extracting images..."
            ./tools/payload_dumper.py --out . --images boot init_boot vendor_boot system_ext payload.bin
          else
            echo "payload.bin not found, using existing images..."
          fi

          for img in boot init_boot vendor_boot; do
            if [ -f "$img.img" ]; then
              7z a "${img}_img_$(basename "$URL")" "$img.img"
            else
              echo "$img.img not found, skipping..."
            fi
          done

          if [ -f "system_ext.img" ]; then
            sudo mkdir -p /mnt/priv-app/Settings && sudo chmod -R 777 /mnt && \
            7z x system_ext.img -o/mnt -y && \
            sudo cp /mnt/priv-app/Settings/Settings.apk . && echo "method 1 used" || \
            (./tools/extract.erofs -i system_ext.img -x -o . && cp system_ext/priv-app/Settings/Settings.apk . && echo "method 2 used" || (echo "both methods failed" && exit 1))

            7z a "Settings_apk_$(basename "$URL")" Settings.apk
          else
            echo "system_ext.img not found, skipping Settings.apk extraction"
          fi

      - name: upload
        run: |
          if [ -f "boot.img" ]; then
            gh release upload "boot_img" "boot_img_$(basename "$URL")" --clobber
          else
            echo "boot.img not found, skipping upload"
          fi

          if [ -f "init_boot.img" ]; then
            gh release upload "init_boot" "init_boot_$(basename "$URL")" --clobber
          else
            echo "init_boot.img not found, skipping upload"
          fi

          if [ -f "vendor_boot.img" ]; then
            gh release upload "vendor_boot" "vendor_boot_$(basename "$URL")" --clobber
          else
            echo "vendor_boot.img not found, skipping upload"
          fi

          if [ -f "Settings.apk" ]; then
            gh release upload "Settings_apk" "Settings_apk_$(basename "$URL")" --clobber
          else
            echo "Settings.apk not found, skipping upload"
          fi

      - name: update v.text
        run: |
          echo "$(basename "$URL")" >> v.text
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add v.text
          git commit -m "update v.text with $(basename "$URL")"
          git push