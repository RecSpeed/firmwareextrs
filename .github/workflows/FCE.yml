name: FCE

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
      track:
        required: false
      get:
        required: true

env:
  URL: ${{ github.event.inputs.url }}
  GET: ${{ github.event.inputs.get }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  FCE:
    name: ${{ github.event.inputs.track }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip p7zip-full aria2 jq
          git clone https://github.com/vm03/payload_dumper.git tools
          pip install -r ./tools/requirements.txt

      - name: Download Firmware
        run: |
          aria2c -x 7 -s 7 -k 1M --continue --max-tries=0 --out='firmware.zip' "$URL"
          7z x firmware.zip -o./
          rm firmware.zip

      - name: Extract Images
        run: |
          if [ -f "payload.bin" ]; then
            echo "payload.bin found, extracting..."
            ./tools/payload_dumper.py --out . --images boot,recovery payload.bin
          else
            echo "payload.bin not found, checking for raw images..."
          fi

      - name: Create ZIP
        run: |
          rom_name=$(basename "$URL" .zip)
          mkdir -p release

          if [ "$GET" = "boot_img" ] && [ -f "boot.img" ]; then
            7z a "./release/boot_img_${rom_name}.zip" boot.img
          elif [ "$GET" = "recovery_img" ] && [ -f "recovery.img" ]; then
            7z a "./release/recovery_img_${rom_name}.zip" recovery.img
          else
            echo "Requested image not found"
            exit 1
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          name: Auto Firmware Extracts
          files: release/*.zip

      - name: Update v.json (success)
        if: success()
        run: |
          rom_name=$(basename "$URL" .zip)
          FILE="v.json"
          key="${GET}_zip"
          val="true"
          link_key="${GET}_link"
          link_val="https://github.com/RecSpeed/firmwareextrs/releases/download/auto/${GET}_${rom_name}.zip"

          if [ ! -f "$FILE" ]; then echo "{}" > "$FILE"; fi

          jq --arg rn "$rom_name" --arg key "$key" --arg val "$val" \
             --arg lkey "$link_key" --arg lval "$link_val" \
             '.[$rn][$key]=$val | .[$rn][$lkey]=$lval' "$FILE" > tmp && mv tmp "$FILE"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add v.json
          git commit -m "update $GET for $rom_name"
          git push

      - name: Update v.json (failure)
        if: failure()
        run: |
          rom_name=$(basename "$URL" .zip)
          FILE="v.json"
          key="${GET}_zip"
          val="false"

          if [ ! -f "$FILE" ]; then echo "{}" > "$FILE"; fi

          jq --arg rn "$rom_name" --arg key "$key" --arg val "$val" \
             '.[$rn][$key]=$val' "$FILE" > tmp && mv tmp "$FILE"

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add v.json
          git commit -m "mark failure for $GET $rom_name"
          git push

      - name: End of Process
        run: |
          echo "✔️ Process completed for $GET → $URL"
        continue-on-error: true
