name: FCE

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
      get:
        required: true
      track:
        required: true

env:
  URL: ${{ github.event.inputs.url }}
  GET: ${{ github.event.inputs.get }}
  TRACK: ${{ github.event.inputs.track }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CF_ACCOUNT_ID: your_cloudflare_account_id
  CF_KV_NAMESPACE_ID: your_kv_namespace_id

jobs:
  FCE:
    name: ${{ github.event.inputs.track }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip p7zip-full aria2
          git clone https://github.com/vm03/payload_dumper.git tools
          pip install -r ./tools/requirements.txt

      - name: Download Firmware
        run: |
          aria2c -x 7 -s 7 -k 1M --continue --max-tries=0 --out='firmware.zip' "$URL"
          7z x firmware.zip -o./
          rm firmware.zip

      - name: Extract Images
        run: |
          if [ -f "payload.bin" ]; then
            echo "payload.bin found, extracting..."
            ./tools/payload_dumper.py --out . --images boot,recovery payload.bin
          else
            echo "payload.bin not found, checking for raw images..."
          fi

      - name: Create ZIP
        run: |
          rom_name=$(basename "$URL" .zip)
          mkdir -p release

          if [ "$GET" = "boot_img" ] && [ -f "boot.img" ]; then
            7z a "./release/boot_img_${rom_name}.zip" boot.img
          elif [ "$GET" = "recovery_img" ] && [ -f "recovery.img" ]; then
            7z a "./release/recovery_img_${rom_name}.zip" recovery.img
          else
            echo "Requested image not found"
            exit 1
          fi

      - name: Upload to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          name: Auto Firmware Extracts
          files: release/*.zip

      - name: Set Status to DONE (✅)
        if: success()
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ env.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ env.CF_KV_NAMESPACE_ID }}/values/${{ env.TRACK }}" \
            -H "Authorization: Bearer ${{ env.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: text/plain" \
            --data 'done'

      - name: Set Status to FAIL (❌)
        if: failure()
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ env.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ env.CF_KV_NAMESPACE_ID }}/values/${{ env.TRACK }}" \
            -H "Authorization: Bearer ${{ env.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: text/plain" \
            --data 'fail'

      - name: End of Process
        run: |
          echo "✔️ Process completed for $GET → $URL"
        continue-on-error: true
