name: Enhanced Firmware Extraction

on:
  workflow_dispatch:
    inputs:
      url:
        required: true
        description: 'Firmware ZIP URL'
      firmware_name:
        required: true
        description: 'Firmware Base Name (without .zip)'
      track:
        required: false
        description: 'Tracking ID'
      image_type:
        required: true
        default: 'boot'
        description: 'boot/recovery/modem/vendor_boot/init_boot/preloader'

concurrency:
  group: extract-${{ inputs.image_type }}-${{ inputs.firmware_name }}
  cancel-in-progress: true

jobs:
  extract:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            android-sdk-libsparse-utils \
            p7zip-full \
            aria2 \
            brotli \
            jq \
            python3-pip

          sudo ln -sf /usr/lib/android-sdk/libsparse-utils/simg2img /usr/local/bin/

          git clone --depth=1 https://github.com/vm03/payload_dumper.git tools
          aria2c -x 8 -s 8 -o erofs-utils.zip https://github.com/sekaiacg/erofs-utils/releases/download/v1.8.1-240810/erofs-utils-v1.8.1-gddbed144-Linux_x86_64-2408101422.zip
          7z x erofs-utils.zip -otools
          rm -f erofs-utils.zip

          pip install --no-cache-dir -r ./tools/requirements.txt

      - name: Download firmware
        run: |
          aria2c -x 8 -s 8 -k 1M --continue --out=firmware.zip "${{ inputs.url }}"
          [ -f firmware.zip ] || (echo "::error::Download failed" && exit 1)

      - name: Extract ZIP contents
        run: |
          7z x firmware.zip -oextracted -y
          rm -f firmware.zip

      - name: Find and package image
        id: process
        run: |
          cd extracted
          output_file="${{ inputs.image_type }}_${{ inputs.firmware_name }}.zip"

          case "${{ inputs.image_type }}" in
            boot) patterns="boot.img"; partitions="boot" ;;
            recovery) patterns="recovery.img"; partitions="recovery" ;;
            modem) patterns="NON-HLOS.bin modem.bin modem.img md1img.img md1img.bin"; partitions="modem md1img md1img.img md1img.bin NON-HLOS modem.img modem.bin" ;;
            vendor_boot) patterns="vendor_boot.img"; partitions="vendor_boot" ;;
            init_boot) patterns="init_boot.img"; partitions="init_boot" ;;
            preloader) patterns="preloader_raw.img preloader.bin preloader.img"; partitions="preloader_raw" ;;
            *) echo "::error::Unsupported image_type: ${{ inputs.image_type }}" && exit 1 ;;
          esac

          found=false

          echo "🔍 Searching inside extracted ZIP for patterns..."
          for pattern in $patterns; do
            file=$(find . -iname "$pattern" | head -n 1)
            if [ -f "$file" ]; then
              echo "✅ Found in ZIP: $file"
              7z a "../$output_file" "$file"
              found=true
              break
            else
              echo "❌ Not in ZIP: $pattern"
            fi
          done

          if [ "$found" = false ] && [ -f "payload.bin" ]; then
            echo "📦 payload.bin detected, trying partition extraction..."
            for part in $partitions; do
              echo "➡️ Trying partition: $part"
              if python3 ../tools/payload_dumper.py --images "$part" payload.bin; then
                for pattern in $patterns; do
                  file=$(find . -iname "$pattern" | head -n 1)
                  if [ -f "$file" ]; then
                    echo "✅ Found after extracting $part: $file"
                    7z a "../$output_file" "$file"
                    found=true
                    break 2
                  else
                    echo "❌ $pattern not found after extracting $part"
                  fi
                done
              else
                echo "⚠️ Partition $part not found in payload.bin"
              fi
            done
          fi

          if [ "$found" = false ]; then
            echo "::error::Target image not found"
            exit 1
          fi

          echo "file_name=$output_file" >> $GITHUB_OUTPUT

      - name: Upload release
        if: success()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: auto
          files: ${{ steps.process.outputs.file_name }}

      - name: Update KV on Success
        if: success()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          file="${{ steps.process.outputs.file_name }}"
          data="{\"state\": \"complete\", \"timestamp\": \"$timestamp\", \"error\": null, \"file\": \"$file\"}"
          echo "Updating KV (success): $data"

          response=$(curl -sS -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/$key" \
            -H "X-Auth-Email: ${{ secrets.CF_X_AUTH_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CF_X_AUTH_KEY }}" \
            -H "Content-Type: application/json" \
            --data "$data")

          if ! echo "$response" | jq -e '.success == true' > /dev/null; then
            echo "::error::KV güncelleme başarısız (success): $response"
            exit 1
          fi

      - name: Update KV on Failure
        if: failure()
        run: |
          key="${{ inputs.image_type }}:${{ inputs.firmware_name }}"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          error_msg=$(grep "::error::" "$GITHUB_STEP_SUMMARY" | sed -n 's/.*::error:://p' | tail -1 || echo "Unknown failure")
          data="{\"state\": \"failed\", \"timestamp\": \"$timestamp\", \"error\": \"$error_msg\", \"tracking_url\": \"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID\"}"
          echo "Updating KV (failure): $data"

          response=$(curl -sS -X PUT "https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCOUNT_ID }}/storage/kv/namespaces/${{ secrets.CF_NAMESPACE_ID }}/values/$key" \
            -H "X-Auth-Email: ${{ secrets.CF_X_AUTH_EMAIL }}" \
            -H "X-Auth-Key: ${{ secrets.CF_X_AUTH_KEY }}" \
            -H "Content-Type: application/json" \
            --data "$data")

          if ! echo "$response" | jq -e '.success == true' > /dev/null; then
            echo "::error::KV güncelleme başarısız (failure): $response"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: rm -rf extracted tools
